{"ast":null,"code":"// import { createSlice } from \"@reduxjs/toolkit\";\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: {\n//     name: \"john\",\n//     email: \"john@email.com\",\n//   },\n//   reducers: {\n//     update: (state, action) => {\n//       state.name = action.payload.name;\n//       state.email = action.payload.email;\n//     },\n//     remove: (state) => {\n//       state = null;\n//     },\n//     addHelloToName : (state, action) =>{\n//       state.name = \"Hello \" + action.payload.name\n//     }\n//   },\n// });\n// export const { update, remove } = userSlice.actions;\n// export default userSlice.reducer;\n////////////////////////////////////////////////////////\n// import { createSlice } from \"@reduxjs/toolkit\";\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: {\n//     userInfo: {\n//       name: \"john\",\n//       email: \"john@email.com\",\n//     },\n//     pending: false,\n//     error: false,\n//   },\n//   reducers: {\n//     updateStart: (state) => {\n//       state.pending = true;\n//     },\n//     updateSuccess: (state, action) => {\n//       state.pending = false;\n//       state.userInfo = action.payload;\n//     },\n//     updateFailure: (state) => {\n//       state.pending = false;\n//       state.error = true;\n//     },\n//   },\n// });\n// export const { updateStart, updateSuccess, updateFailure } = userSlice.actions;\n// export default userSlice.reducer;\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const updateUser2 = createAsyncThunk(\"users/update\", async user => {\n  const response = await axios.post(\"http://localhost:8800/api/users/1/update\", user);\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    userInfo: {\n      name: \"john\",\n      email: \"john@email.com\"\n    },\n    pending: null,\n    error: null\n  },\n  reducers: {},\n  extraReducers: {\n    [updateUser2.pending]: state => {\n      state.pending = true;\n      state.error = false;\n    },\n    [updateUser2.fulfilled]: (state, action) => {\n      state.userInfo = action.payload;\n      state.pending = false;\n    },\n    [updateUser2.rejected]: state => {\n      state.pending = false;\n      state.error = true;\n    }\n  }\n});\nexport const {\n  updateStart,\n  updateSuccess,\n  updateFailure\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/MAURICE/Documents/Web Development/Redux/src/redux/userSlice.js"],"names":["createSlice","createAsyncThunk","axios","updateUser2","user","response","post","data","userSlice","name","initialState","userInfo","email","pending","error","reducers","extraReducers","state","fulfilled","action","payload","rejected","updateStart","updateSuccess","updateFailure","actions","reducer"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,cAAD,EAAiB,MAAOG,IAAP,IAAgB;AAC1E,QAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAN,CACrB,0CADqB,EAErBF,IAFqB,CAAvB;AAIA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CAN0C,CAApC;AAQP,OAAO,MAAMC,SAAS,GAAGR,WAAW,CAAC;AACnCS,EAAAA,IAAI,EAAE,MAD6B;AAEnCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,IAAI,EAAE,MADE;AAERG,MAAAA,KAAK,EAAE;AAFC,KADE;AAKZC,IAAAA,OAAO,EAAE,IALG;AAMZC,IAAAA,KAAK,EAAE;AANK,GAFqB;AAUnCC,EAAAA,QAAQ,EAAE,EAVyB;AAWnCC,EAAAA,aAAa,EAAE;AACb,KAACb,WAAW,CAACU,OAAb,GAAwBI,KAAD,IAAW;AAChCA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,KAAd;AACD,KAJY;AAKb,KAACX,WAAW,CAACe,SAAb,GAAyB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC1CF,MAAAA,KAAK,CAACN,QAAN,GAAiBQ,MAAM,CAACC,OAAxB;AACAH,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD,KARY;AASb,KAACV,WAAW,CAACkB,QAAb,GAAyBJ,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACD;AAZY;AAXoB,CAAD,CAA7B;AA2BP,OAAO,MAAM;AAAEQ,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,IAAgDhB,SAAS,CAACiB,OAAhE;AAEP,eAAejB,SAAS,CAACkB,OAAzB","sourcesContent":["// import { createSlice } from \"@reduxjs/toolkit\";\n\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: {\n//     name: \"john\",\n//     email: \"john@email.com\",\n//   },\n//   reducers: {\n//     update: (state, action) => {\n//       state.name = action.payload.name;\n//       state.email = action.payload.email;\n//     },\n//     remove: (state) => {\n//       state = null;\n//     },\n//     addHelloToName : (state, action) =>{\n//       state.name = \"Hello \" + action.payload.name\n//     }\n//   },\n// });\n\n// export const { update, remove } = userSlice.actions;\n\n// export default userSlice.reducer;\n\n////////////////////////////////////////////////////////\n\n// import { createSlice } from \"@reduxjs/toolkit\";\n\n// export const userSlice = createSlice({\n//   name: \"user\",\n//   initialState: {\n//     userInfo: {\n//       name: \"john\",\n//       email: \"john@email.com\",\n//     },\n//     pending: false,\n//     error: false,\n//   },\n//   reducers: {\n//     updateStart: (state) => {\n//       state.pending = true;\n//     },\n//     updateSuccess: (state, action) => {\n//       state.pending = false;\n//       state.userInfo = action.payload;\n//     },\n//     updateFailure: (state) => {\n//       state.pending = false;\n//       state.error = true;\n//     },\n//   },\n// });\n\n// export const { updateStart, updateSuccess, updateFailure } = userSlice.actions;\n\n// export default userSlice.reducer;\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const updateUser2 = createAsyncThunk(\"users/update\", async (user) => {\n  const response = await axios.post(\n    \"http://localhost:8800/api/users/1/update\",\n    user\n  );\n  return response.data;\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    userInfo: {\n      name: \"john\",\n      email: \"john@email.com\",\n    },\n    pending: null,\n    error: null,\n  },\n  reducers: {},\n  extraReducers: {\n    [updateUser2.pending]: (state) => {\n      state.pending = true;\n      state.error = false;\n    },\n    [updateUser2.fulfilled]: (state, action) => {\n      state.userInfo = action.payload;\n      state.pending = false;\n    },\n    [updateUser2.rejected]: (state) => {\n      state.pending = false;\n      state.error = true;\n    },\n  },\n});\n\nexport const { updateStart, updateSuccess, updateFailure } = userSlice.actions;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}